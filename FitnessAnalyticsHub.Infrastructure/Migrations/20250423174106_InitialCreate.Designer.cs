// <auto-generated />
using System;
using FitnessAnalyticsHub.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitnessAnalyticsHub.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250423174106_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("FitnessAnalyticsHub.Domain.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AverageCadence")
                        .HasColumnType("REAL");

                    b.Property<int?>("AverageHeartRate")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AveragePower")
                        .HasColumnType("REAL");

                    b.Property<double?>("AverageSpeed")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<double>("Distance")
                        .HasColumnType("REAL");

                    b.Property<int>("ElapsedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxHeartRate")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("MaxPower")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxSpeed")
                        .HasColumnType("REAL");

                    b.Property<int>("MovingTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("SportType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateLocal")
                        .HasColumnType("TEXT");

                    b.Property<string>("StravaId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Timezone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalElevationGain")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("FitnessAnalyticsHub.Domain.Entities.Athlete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("StravaId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("FitnessAnalyticsHub.Domain.Entities.PlannedActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CompletedActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("TEXT");

                    b.Property<double?>("PlannedDistance")
                        .HasColumnType("REAL");

                    b.Property<int?>("PlannedDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SportType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TrainingPlanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompletedActivityId");

                    b.HasIndex("TrainingPlanId");

                    b.ToTable("PlannedActivities");
                });

            modelBuilder.Entity("FitnessAnalyticsHub.Domain.Entities.TrainingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Goal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("TrainingPlans");
                });

            modelBuilder.Entity("FitnessAnalyticsHub.Domain.Entities.Activity", b =>
                {
                    b.HasOne("FitnessAnalyticsHub.Domain.Entities.Athlete", "Athlete")
                        .WithMany("Activities")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("FitnessAnalyticsHub.Domain.Entities.PlannedActivity", b =>
                {
                    b.HasOne("FitnessAnalyticsHub.Domain.Entities.Activity", "CompletedActivity")
                        .WithMany()
                        .HasForeignKey("CompletedActivityId");

                    b.HasOne("FitnessAnalyticsHub.Domain.Entities.TrainingPlan", "TrainingPlan")
                        .WithMany("PlannedActivities")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompletedActivity");

                    b.Navigation("TrainingPlan");
                });

            modelBuilder.Entity("FitnessAnalyticsHub.Domain.Entities.TrainingPlan", b =>
                {
                    b.HasOne("FitnessAnalyticsHub.Domain.Entities.Athlete", "Athlete")
                        .WithMany("TrainingPlans")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("FitnessAnalyticsHub.Domain.Entities.Athlete", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("TrainingPlans");
                });

            modelBuilder.Entity("FitnessAnalyticsHub.Domain.Entities.TrainingPlan", b =>
                {
                    b.Navigation("PlannedActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
