name: .NET CI/CD

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚚 Checkout Code
      uses: actions/checkout@v3
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        
    - name: 📦 Restore Dependencies
      run: dotnet restore

    - name: 🧹 Clean Before Build
      run: |
        dotnet clean
        rm -rf */bin */obj
      
    - name: 🏗️ Build Solution
      run: dotnet build --no-restore --configuration Release --property:TargetFramework=net8.0 --ignore-failed-sources --verbosity normal
      
    - name: ✅ Run Unit Tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --filter "Category!=Architecture"
      
    - name: 🏛️ Run Architecture Tests
      run: dotnet test --no-build --configuration Release --verbosity normal --filter "Category=Architecture"
      
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: "**/TestResults/**/*.xml"
        
    - name: 📈 Upload Code Coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-coverage
        path: "**/TestResults/**/coverage.cobertura.xml"
    
  # SonarCloud Code Quality Analysis
  sonarcloud:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    
    steps:
    - name: 🚚 Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        
    - name: 🔍 Install SonarCloud Scanner
      run: dotnet tool install --global dotnet-sonarscanner
      
    - name: 📦 Restore Dependencies
      run: dotnet restore
      
    - name: 🔬 SonarCloud Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet clean
        dotnet sonarscanner begin /k:"lady-logic_FitnessAnalyticsHubV1_0" /o:"lady-logic" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml"
        dotnet build --configuration Release
        dotnet test --configuration Release --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  # Docker Build & Push Job (SEPARATE Job!)
  docker:
    runs-on: ubuntu-latest
    needs: [build-and-test, sonarcloud]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Extract metadata for WebApi
      id: meta-webapi
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/fitness-webapi
        tags: |
          type=ref,event=branch
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push WebApi Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./FitnessAnalyticsHub.WebApi/Dockerfile
        push: true
        tags: ${{ steps.meta-webapi.outputs.tags }}
        labels: ${{ steps.meta-webapi.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push AI Assistant Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./AIAssistant/Dockerfile
        push: true
        tags: |
          ghcr.io/lady-logic/fitness-ai:latest
          ghcr.io/lady-logic/fitness-ai:sha-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🎯 Deploy Summary
      run: |
        echo "## 🐳 Docker Images Built & Pushed" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Image | Tags |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|-------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| WebApi | \`ghcr.io/${{ github.repository }}/fitness-webapi\` | \`latest\`, \`sha-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| AI Assistant | \`ghcr.io/lady-logic/fitness-ai\` | \`latest\`, \`sha-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Ready for Deployment!" >> $GITHUB_STEP_SUMMARY
        echo "Images are now available in GitHub Container Registry and ready for production deployment." >> $GITHUB_STEP_SUMMARY
